zad1)
1.
DELIMITER //
CREATE TRIGGER kreatura_before_insert
BEFORE INSERT ON kreatura
FOR EACH ROW
BEGIN
  IF waga < 0
  THEN
    SET NEW.waga = 0;
  END IF;
END
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER kreatura_before_update
BEFORE update ON kreatura
FOR EACH ROW
BEGIN
  IF waga < 0
  THEN
    SET NEW.waga = 0;
  END IF;
END
//
DELIMITER ;

zad2)
1.
DELIMITER //
CREATE TRIGGER wyprawa_after_delete
AFTER DELETE ON wyprawa
FOR EACH ROW
BEGIN
DECLARE kierownik_nazwa VARCHAR(100);
SET kierownik_nazwa = (SELECT kreatura.nazwa FROM kreatura WHERE idKreatury = OLD.kierownik);
INSERT INTO archiwum_wypraw VALUES (OLD.id_wyprawy, OLD.nazwa, OLD.data_rozpoczecia, OLD.data_zakonczenia, kierownik_nazwa);
END
//
DELIMITER ;

zad3)
1.
DELIMITER //
CREATE PROCEDURE eliksir_sily(IN id int)
BEGIN
UPDATE kreatura SET udzwig = udzwig * 1.2 where id=idKreatury;
END
//
DELIMITER ;

2.
DELIMITER //
CREATE FUNCTION wielkie_litery(text varchar(255))
RETURNS VARCHAR(255)
BEGIN
DECLARE ucase VARCHAR(255);
SET @ucase = UCASE(text);
RETURN @ucase;
END
//
DELIMITER ;

zad4)
1.
create table system_alarmowy(
id_alarmu int auto_increment,
wiadomosc varchar(255),
PRIMARY KEY (id_alarmu));

2.
DELIMITER //
CREATE TRIGGER system_alarmowy_after_wyprawy
AFTER INSERT ON wyprawa
FOR EACH ROW
BEGIN
DECLARE zmienna int;
select count(*) INTO zmienna
from etapy_wyprawy ew, kreatura k, wyprawa w, uczestnicy u
where ew.idWyprawy=w.id_wyprawy 
AND k.idKreatury=u.id_uczestnika
AND u.id_wyprawy=w.id_wyprawy 
AND k.nazwa='Tesciowa' and ew.sektor=7
AND w.id_wyprawy=NEW.id_wyprawy;
IF zmienna > 0
THEN 
INSERT INTO system_alarmowy VALUES(default,"TESCIOWA NADCHODZI!!!");
END IF;
END
//
DELIMITER ;

zad5)
DELIMITER //
CREATE PROCEDURE parametry_wyjsc(
OUT srednia_udzwigu float,
OUT suma_udzwigu float,
OUT maks_udzwigu  float )
BEGIN
select AVG(udzwig) , SUM(udzwig) , MAX(udzwig)  
INTO @srednia_udzwigu, @suna_udzwigu, @maks_udzwigu	
FROM kreatura;
END
//
DELIMITER ;